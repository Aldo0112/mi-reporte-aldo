{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n del Proyecto","text":"<p>Bienvenido \ud83d\udc4b Esta es una plantilla basada en MkDocs + Material for MkDocs para cursos y proyectos.</p>"},{"location":"#empezar-rapido-3-pasos","title":"Empezar r\u00e1pido (3 pasos)","text":"<ol> <li>Edita el nombre del sitio en <code>mkdocs.yml</code>:    ```yaml    site_name: Documentaci\u00f3n del Curso    theme:      name: material</li> </ol>"},{"location":"Presentacion/","title":"Presentacion","text":""},{"location":"Presentacion/#presentacion-personal","title":"Presentaci\u00f3n personal","text":""},{"location":"Presentacion/#descripcion-personal","title":"Descripci\u00f3n personal","text":"<p>Mi nombre es Aldo Ibrahim Alvarez Fern\u00e1ndez, soy estudiante de mecatr\u00f3nica en la universidad IBERO de Puebla. En cuanto a la carrera estoy interesado en el armado de robots, especialmente en la parte de electr\u00f3nica y mec\u00e1nica.</p>"},{"location":"Presentacion/#datos-de-contacto","title":"Datos de contacto","text":"<p>Correo electr\u00f3nico: aiaf.9806@gmail.com</p> <p>Celular: 5655940755</p>"},{"location":"Presentacion/#proyecto-realizado-anteriormente","title":"Proyecto realizado anteriormente","text":"<p>Un proyecto que hice con anterioridad del cual me siento orgulloso es el armado de un robot el cual ten\u00eda como objetivo poder salir de un laberinto usando sensores ultras\u00f3nicos y una placa Arduino</p> <p>Video del robot en funcionamiento</p>"},{"location":"bluetooth/","title":"Bluetooth","text":""},{"location":"bluetooth/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Bluetooth</li> <li>Equipo / Autor(es): Aldo Alvarez, Alexandra Groot</li> <li>Curso / Asignatura: Introduccion a la mecatr\u00f3nica</li> <li>Fecha: 12/09/2025  </li> <li>Descripci\u00f3n breve: Prendido y apagado de un led a trav\u00e9s de el uso de la funcion bluetooth de una ESP32.</li> </ul>"},{"location":"bluetooth/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Lograr el encendido y apagado de un led utilizando comandos dados a trav\u00e9s de bluetooth con la ayuda de una ESP32.</li> </ul>"},{"location":"bluetooth/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Conectar y programar el circuito de un ESP32 y un LED para el correcto control de este usando el bluetooth.</li> </ul>"},{"location":"bluetooth/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Arduino - Aplicaci\u00f3n \"Serial bluetooth terminal\"</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica en C++ - _Electr\u00f3nica b\u00e1sica</p>"},{"location":"bluetooth/#5-desarrollo","title":"5) Desarrollo","text":""},{"location":"bluetooth/#electronica","title":"Electr\u00f3nica","text":"<p>Primero se instalo la ESP32 en una protoboard y se conecto el LED a un puerto previamente determinando haciendo uso de una resistencia para el correcto funcionamiento del LED.</p>"},{"location":"bluetooth/#programacion","title":"Programaci\u00f3n","text":"<p>Se utilizo un codigo en C++ a trav\u00e9s de la aplicaci\u00f3n de Arduino en el cual se activaba la funcion bluetooth de la ESP32 para despues indicar que mensaje recibido iba a encender el Led y cual lo iba a apagar.</p> <p>El c\u00f3digo fu\u00e9 el siguiente:</p> <p>```#include \"BluetoothSerial.h\" BluetoothSerial SerialBT;</p>"},{"location":"bluetooth/#define-led-23","title":"define LED 23","text":"<p>void setup() {     Serial.begin(115200);     SerialBT.begin(\"ESP32\");     pinMode(LED, OUTPUT); }</p> <p>void loop() {     if (SerialBT.available()) {         String mensaje = SerialBT.readString();         Serial.println(\"Recibido: \" + mensaje);         if (mensaje == \"ON\") {             digitalWrite(LED, HIGH);         } else if (mensaje == \"OFF\") {             digitalWrite(LED, LOW);         }     }     delay(1000); } ```</p>"},{"location":"bluetooth/#6-resultado-y-evidencia","title":"6) Resultado y evidencia","text":"<p>Como esperado el Led prendia y apagaba segun la instruccion dada a trav\u00e9s del celular</p> <p>Video del funcionamiento</p>"},{"location":"carritos/","title":"Carritos","text":""},{"location":"carritos/#carritos","title":"Carritos","text":""},{"location":"carritos/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Carritos con motores DC  </li> <li>Equipo / Autor(es): Emily Mendez, Aldo Fernandez, Alexandra Groot, Valeria Pi\u00f1a, Arturo Mart\u00ednez, Sebastian Rodr\u00edguez, Erik Zepeda  </li> <li>Curso / Asignatura: Introducci\u00f3n a la Mecatr\u00f3nica  </li> <li>Fecha: 15/10/2025  </li> <li>Descripci\u00f3n breve: Desarrollo de un carrito a control remoto con bases de motores DC, puente H, ESP32, Control Bluetooth, etc.</li> </ul>"},{"location":"carritos/#2-objetivos","title":"2) Objetivos","text":"<p>General: </p> <p>Aplicar los conocimientos vistos en clase para dise\u00f1ar y construir un coche a control remoto que pueda competir con los de otros equipos..</p> <p>Espec\u00edficos:</p> <ul> <li> <p>Hacer un sistema que permita mover el coche de forma r\u00e1pida y controlada para atrapar una pelota y anotar goles.</p> </li> <li> <p>Lograr meter m\u00e1s goles que el equipo contrario durante la competencia.</p> </li> </ul>"},{"location":"carritos/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Dise\u00f1ar y construir un coche con materiales propios, con un sistema de movimiento din\u00e1mico y control remoto por Bluetooth, en un tiempo de alrededor de dos semanas.</li> </ul>"},{"location":"carritos/#4-planeacion","title":"4) Planeaci\u00f3n","text":"<p>Para comenzar el proyecto, el equipo se dividi\u00f3 en tareas. Dos integrantes se encargaron del dise\u00f1o del coche, y los dem\u00e1s trabajaron en la parte electr\u00f3nica y de programaci\u00f3n. As\u00ed se pudo avanzar de manera m\u00e1s r\u00e1pida y organizada.</p> <p>La lista de materiales que usamos fue la siguiente:</p> <ul> <li> <p>Puente H</p> </li> <li> <p>Dos motores DC</p> </li> <li> <p>Protoboard</p> </li> <li> <p>Microcontrolador ESP32</p> </li> <li> <p>Jumpers</p> </li> <li> <p>Luces LED</p> </li> <li> <p>Pila de 9V</p> </li> </ul> <p>Tambi\u00e9n se utiliz\u00f3 MDF para construir la estructura del coche y PLA para imprimir en 3D una pala que sirviera para empujar la pelota hacia la porter\u00eda del otro equipo.</p>"},{"location":"carritos/#5-desarrollo","title":"5) Desarrollo","text":""},{"location":"carritos/#electronica","title":"Electr\u00f3nica","text":"<p>Primero, se conectaron los motores a las bases hechas de MDF y luego al puente H. Se revis\u00f3 que la corriente y la conexi\u00f3n a tierra estuvieran bien.</p> <p>Los pines IN1, IN2, IN3 e IN4 se conectaron para que los motores pudieran girar hacia adelante y hacia atr\u00e1s seg\u00fan fuera necesario.</p> <p>Despu\u00e9s, se conect\u00f3 la ESP32, revisando las hojas de datos y cuidando que no hubiera cortos. Los pines usados se definieron m\u00e1s tarde en el c\u00f3digo de programaci\u00f3n.</p>"},{"location":"carritos/#programacion","title":"Programaci\u00f3n","text":"<p>Con las conexiones listas, se desarroll\u00f3 un c\u00f3digo para controlar el coche desde un celular mediante Bluetooth.</p> <p>Se crearon varias funciones: una para avanzar, otra para retroceder, una para girar a la derecha, otra a la izquierda y una m\u00e1s para detener el coche.</p> <p>Para controlar la velocidad y los giros se utiliz\u00f3 PWM (modulaci\u00f3n por ancho de pulso). Por ejemplo:</p> <ul> <li> <p>Si gira a la izquierda, la llanta derecha se detiene y la izquierda sigue girando.</p> </li> <li> <p>Si gira a la derecha, se hace lo contrario.</p> </li> <li> <p>Para avanzar, ambas llantas giran a la misma velocidad.</p> </li> <li> <p>Para detenerse, las dos se apagan.</p> </li> </ul> <p>Tambi\u00e9n se agreg\u00f3 una funci\u00f3n que permite cambiar la velocidad del coche dependiendo del n\u00famero que se env\u00ede desde la aplicaci\u00f3n Bluetooth.</p> <p>codigo</p>"},{"location":"carritos/#include-bluetoothserialh","title":"include \"BluetoothSerial.h\"","text":"<p>BluetoothSerial SerialBT;</p> <p>// Pines del puente H</p> <p>const int IN1 = 12; // Motor izquierdo</p> <p>const int IN2 = 11;</p> <p>const int ENA = 13;</p> <p>const int IN3 = 10; // Motor derecho</p> <p>const int IN4 = 9;</p> <p>const int ENB = 7;</p> <p>int valSpeed = 255;</p> <p>void setup() {</p> <p>Serial.begin(115200);</p> <p>SerialBT.begin(\"CarroESP32\"); // Nombre del dispositivo Bluetooth</p> <p>pinMode(IN1, OUTPUT);</p> <p>pinMode(IN2, OUTPUT);</p> <p>pinMode(ENA, OUTPUT);</p> <p>pinMode(IN3, OUTPUT);</p> <p>pinMode(IN4, OUTPUT);</p> <p>pinMode(ENB, OUTPUT);</p> <p>stopMotors();</p> <p>}</p> <p>void loop() {</p> <p>if (SerialBT.available()) {</p> <pre><code>char command = SerialBT.read();\n\nSerial.println(command);\n\nswitch (command) {\n\n  case 'F': forward(); break;\n\n  case 'B': backward(); break;\n\n  case 'L': turnLeft(); break;\n\n  case 'R': turnRight(); break;\n\n  case 'S': stopMotors(); break;\n\n  case '0': setSpeed(0); break;\n\n  case '1': setSpeed(25); break;\n\n  case '2': setSpeed(50); break;\n\n  case '3': setSpeed(75); break;\n\n  case '4': setSpeed(100); break;\n\n  case '5': setSpeed(125); break;\n\n  case '6': setSpeed(150); break;\n\n  case '7': setSpeed(175); break;\n\n  case '8': setSpeed(200); break;\n\n  case '9': setSpeed(255); break;\n\n}\n</code></pre> <p>}</p> <p>}</p> <p>void forward() {</p> <p>analogWrite(ENA, valSpeed);</p> <p>analogWrite(ENB, valSpeed);</p> <p>digitalWrite(IN1, HIGH);</p> <p>digitalWrite(IN2, LOW);</p> <p>digitalWrite(IN3, HIGH);</p> <p>digitalWrite(IN4, LOW);</p> <p>}</p> <p>void backward() {</p> <p>analogWrite(ENA, valSpeed);</p> <p>analogWrite(ENB, valSpeed);</p> <p>digitalWrite(IN1, LOW);</p> <p>digitalWrite(IN2, HIGH);</p> <p>digitalWrite(IN3, LOW);</p> <p>digitalWrite(IN4, HIGH);</p> <p>}</p> <p>void turnLeft() {</p> <p>analogWrite(ENA, valSpeed / 2);</p> <p>analogWrite(ENB, valSpeed);</p> <p>digitalWrite(IN1, HIGH);</p> <p>digitalWrite(IN2, LOW);</p> <p>digitalWrite(IN3, HIGH);</p> <p>digitalWrite(IN4, LOW);</p> <p>}</p> <p>void turnRight() {</p> <p>analogWrite(ENA, valSpeed);</p> <p>analogWrite(ENB, valSpeed / 2);</p> <p>digitalWrite(IN1, HIGH);</p> <p>digitalWrite(IN2, LOW);</p> <p>digitalWrite(IN3, HIGH);</p> <p>digitalWrite(IN4, LOW);</p> <p>}</p> <p>void stopMotors() {</p> <p>analogWrite(ENA, 0);</p> <p>analogWrite(ENB, 0);</p> <p>digitalWrite(IN1, LOW);</p> <p>digitalWrite(IN2, LOW);</p> <p>digitalWrite(IN3, LOW);</p> <p>digitalWrite(IN4, LOW);</p> <p>}</p> <p>void setSpeed(int val) {</p> <p>valSpeed = val;</p> <p>}</p>"},{"location":"carritos/#aplicacion","title":"Aplicaci\u00f3n","text":"<p>Para controlar el coche, se us\u00f3 una aplicaci\u00f3n para celular. Esta app permite asignar letras a cada bot\u00f3n, que luego se env\u00edan por Bluetooth a la ESP32.</p> <p>Se configuraron as\u00ed:</p> <ul> <li> <p>F: Avanzar</p> </li> <li> <p>B: Retroceder</p> </li> <li> <p>L: Izquierda</p> </li> <li> <p>R: Derecha</p> </li> <li> <p>S: Detener</p> </li> </ul> <p>Cada vez que se presiona un bot\u00f3n, la aplicaci\u00f3n manda la letra y la ESP32 ejecuta la acci\u00f3n correspondiente.</p> <p>Vista del control dentro de la aplicaci\u00f3n</p>"},{"location":"carritos/#6-resultados-y-evidencias","title":"6) Resultados y Evidencias","text":"<p>Antes del concurso, el coche funcion\u00f3 correctamente: respond\u00eda bien a los comandos, las luces LED se encend\u00edan sin problema, la pala 3D encaj\u00f3 bien y el dise\u00f1o del coche fue atractivo.</p> <p>Durante la competencia, surgieron algunos problemas. Uno de los motores se cay\u00f3 cuando la pala se ator\u00f3 con una silla, y aunque se volvi\u00f3 a asegurar, volvi\u00f3 a soltarse en la segunda ronda. Adem\u00e1s, el control Bluetooth respond\u00eda con algo de retraso y los movimientos eran un poco bruscos.</p> <p>A pesar de eso, el funcionamiento general fue bueno. El coche cumpli\u00f3 con lo planeado, aunque no logr\u00f3 anotar goles ni obtener un lugar destacado.</p> <p>Videos de el carrito en funcionamiento:</p> <p>Video 1</p> <p>Video 2</p>"},{"location":"carritos/#7-conclusiones","title":"7) Conclusiones","text":"<p>El proyecto y la competencia fueron una buena experiencia. La planeaci\u00f3n y ejecuci\u00f3n fueron adecuadas para el tiempo disponible. El coche funcion\u00f3 correctamente y cumpli\u00f3 con los objetivos del curso.</p> <p>Sin embargo, se detectaron algunas mejoras posibles:</p> <ul> <li> <p>Hacer m\u00e1s pruebas antes de la competencia.</p> </li> <li> <p>Asegurar mejor los motores.</p> </li> <li> <p>Practicar m\u00e1s con la aplicaci\u00f3n para mejorar el control.</p> </li> </ul> <p>En t\u00e9rminos generales, el proyecto permiti\u00f3 poner en pr\u00e1ctica los conocimientos adquiridos en la materia de Introducci\u00f3n a la Mecatr\u00f3nica. Adem\u00e1s, contribuy\u00f3 a comprender de manera m\u00e1s clara la integraci\u00f3n entre la electr\u00f3nica, la mec\u00e1nica y la programaci\u00f3n. Tambi\u00e9n evidenci\u00f3 que, para lograr un buen resultado, es necesario realizar numerosas pruebas y dedicar el tiempo suficiente para obtener un proyecto funcional y con el menor n\u00famero posible de fallas.</p>"},{"location":"control_motor/","title":"Control de un motor","text":""},{"location":"control_motor/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Control de un motor </li> <li>Equipo / Autor(es): Aldo Alvarez, Alexandra Groot</li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatr\u00f3nica</li> <li>Fecha: 19/19/25</li> <li>Descripci\u00f3n breve: Lograr que un motor gire por un tiempo determinado</li> </ul>"},{"location":"control_motor/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Con la ayuda de una ESP32 y un puente H lograr el movimiento de un motor por un tiempo determinado en la programaci\u00f3n hecha en Arduino con lenguaje C++.</li> </ul>"},{"location":"control_motor/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: EL movimiento de un motor por el tiempo predeterminado en la programaci\u00f3n y que despu\u00e9s gire al lado contrario.</li> </ul>"},{"location":"control_motor/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Arduino</p> <p>Hardware - Fuente de poder - Multimetro</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica en C++ - Electr\u00f3nica b\u00e1sica</p>"},{"location":"control_motor/#5-desarrollo","title":"5) Desarrollo","text":""},{"location":"control_motor/#electronica","title":"Electr\u00f3nica","text":"<p>Primero se instalo la placa ESP32 a un arduino la cual era alimentada a trav\u00e9s de la conexi\u00f3n a la computadora, despu\u00e9s se conectaron los puertos que ibamos a usar de la ESP32 al puente H, luego conectamos el motor a el puente H seg\u00fan corresponde y finalmente se alimento el puente H con la ayuda de una fuente de poder.</p>"},{"location":"control_motor/#programacion","title":"Programaci\u00f3n","text":"<p>La programaci\u00f3n esta hecha para que el motor gire durante un tiempo determinado hacia una direcci\u00f3n, despu\u00e9s se detenga, gire a la direcci\u00f3n opuesta durante un tiempo determinado, se detenga y continue el ciclo.</p> <p>El codigo utilizado fu\u00e9 el siguiente:</p> <pre><code>#define in1 27\n#define in2 14\n\nvoid setup() {\n  /*Declarar Pines Como salida*/\n  pinMode(in1, OUTPUT);\n  pinMode(in2, OUTPUT);\n}\n\nvoid loop() {\n  /*ADELANTE*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 1);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ATRAS*/\n  digitalWrite(in1, 1);\n  digitalWrite(in2, 0);\n  delay(1000);\n  /*ALTO*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 0);\n  delay(1000);\n}\n</code></pre>"},{"location":"control_motor/#6-resultado-y-evidencias","title":"6) Resultado y evidencias","text":"<p>El resultado fu\u00e9 el esperado logrando que el motor suguiera las instrucciones en la programaci\u00f3n</p> <p>Foto de las conexiones</p> <p>Video del funcionamiento</p>"},{"location":"control_servomotor/","title":"Control servomotor","text":""},{"location":"control_servomotor/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Control servomotor  </li> <li>Equipo / Autor(es): Aldo Alvarez, Alexandra Groot</li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatr\u00f3nica</li> <li>Fecha: 26/09/25  </li> <li>Descripci\u00f3n breve: Controlar el movimiento de un servomotor para que vaya girando en un mayor \u00e1ngulo cada vez.</li> </ul>"},{"location":"control_servomotor/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Lograr que un servomotor vaya aumentando el tama\u00f1o de su giro de 10 en 10 grados empezando en 10 y terminando en 180 para despu\u00e9s volver a empezar el programa con la ayuda de una ESP32 y programado en Arduino</li> </ul>"},{"location":"control_servomotor/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":""},{"location":"control_servomotor/#-incluye-un-servomotor-el-cual-vaya-girando-cada-vez-mas-progresivamente","title":"- Incluye: Un servomotor el cual vaya girando cada vez m\u00e1s progresivamente","text":""},{"location":"control_servomotor/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Arduino</p> <p>Hardware (si aplica) - Fuente de poder - Multimetro</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica en C++ - Electr\u00f3nica b\u00e1sica</p>"},{"location":"control_servomotor/#5-dearrollo","title":"5) Dearrollo","text":""},{"location":"control_servomotor/#electronica","title":"Electr\u00f3nica","text":"<p>Primero se conecto a una protoboard una placa ESP32 la cual estaba alimentada con la conexion a la computadora, despu\u00e9s se conecto el servomotor tanto a un pwm en la placa para controlar su movimiento como a una fuente de poder la cual alimentaba a este.</p>"},{"location":"control_servomotor/#programacion","title":"Programaci\u00f3n","text":"<p>La programaci\u00f3n estaba hecha con el objetivo de que mientras los grados de rotaci\u00f3n del servomotor fueran menores a 180 este iba a aumentar su giro en 10 grados cada vez hasta llegar a 180 y cuando esto sucedia el programa volvia a empezar desde el principio.</p> <p>Imagen de la programaci\u00f3n utilizada</p>"},{"location":"control_servomotor/#6-resultado-y-evidencia","title":"6) Resultado y evidencia","text":"<p>El resultado fu\u00e9 el esperado ya que el servomotor empezaba con un giro de 10 grados girando coda vez mas hasta llegar a los 180 grados y volv\u00eda a repetir el ciclo.</p> <p>Video del funcionamiento del servomotor</p>"},{"location":"encendido_con_motor/","title":"Encendido con bot\u00f3n","text":""},{"location":"encendido_con_motor/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Encendido con bot\u00f3n</li> <li>Equipo / Autor(es): Aldo Alvarez, Alexandra Groot  </li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatr\u00f3nica</li> <li>Fecha: 12/09/25</li> <li>Descripci\u00f3n breve: Encendido de un Led con ayuda de un bot\u00f3n y una ESP32</li> </ul>"},{"location":"encendido_con_motor/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Con la ayuda de una ESP32 se planea lograr el encendido de un LED al mantener un bot\u00f3n presionado y al dejarlo de presionar que este se apague.</li> </ul>"},{"location":"encendido_con_motor/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Un LED el cual al presionar el bot\u00f3n se prenda</li> </ul>"},{"location":"encendido_con_motor/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Arduino</p> <p>Hardware (si aplica) - Bot\u00f3n -Multimetro</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica en C++ - Electr\u00f3nica b\u00e1sica</p>"},{"location":"encendido_con_motor/#5-desarrollo","title":"5) Desarrollo","text":""},{"location":"encendido_con_motor/#electronica","title":"Electr\u00f3nica","text":"<p>Primero se conecto una placa ESP32 a una protoboard, despu\u00e9s se instalo un bot\u00f3n y a este se conecto un LED tomando el puerto especificado y utilizando resistencias para el correcto funcionamiento de este</p>"},{"location":"encendido_con_motor/#programacion","title":"Programaci\u00f3n","text":"<p>El programa que se hizo en C++ tiene el objetivo de que al recibir la se\u00f1al de que el bot\u00f3n esta presionado encienda el LED, de lo contrario el LED permanece apagado</p> <p>El codigo utilizado fu\u00e9 el suiguiente:</p> <pre><code>#define LED 23\n#define BUTTON 33\n\nvoid setup() {\n    pinMode(LED, OUTPUT);\n    pinMode(BUTTON, INPUT);\n}\n\nvoid loop() {\n    if (digitalRead(BUTTON) == HIGH) {\n        digitalWrite(LED, HIGH);\n    } else {\n        digitalWrite(LED, LOW);\n    }\n}\n</code></pre>"},{"location":"encendido_con_motor/#6-resultado-y-evidencia","title":"6) Resultado y evidencia","text":"<p>El resultado fu\u00e9 el esperado logrando de que el LED prendiera exclusivamente cuando el boton estuviera precionado y apagada en el caso contrario</p> <p>Video del funcionamiento</p>"},{"location":"gitcmds/","title":"\ud83d\ude80 Comandos b\u00e1sicos de Git (primeros pasos)","text":"<p>En este curso solo usaremos los comandos esenciales de Git para trabajar con repositorios.</p>"},{"location":"gitcmds/#1-clonar-un-repositorio","title":"1. Clonar un repositorio","text":"<p>Copia un proyecto de GitHub a tu computadora.</p> <pre><code>git clone https://github.com/usuario/repositorio.git\n</code></pre>"},{"location":"gitcmds/#2-verificar-cambios","title":"2. Verificar cambios","text":"<p>Muestra qu\u00e9 archivos has modificado o agregado.</p> <pre><code>git status\n</code></pre>"},{"location":"gitcmds/#3-preparar-cambios","title":"3. Preparar cambios","text":"<p>Agrega archivos para guardarlos en el pr\u00f3ximo commit.</p> <pre><code>git add archivo.txt\ngit add .   # agrega todos los archivos modificados\n</code></pre>"},{"location":"gitcmds/#4-guardar-cambios-commit","title":"4. Guardar cambios (commit)","text":"<p>Guarda tus cambios con un mensaje descriptivo.</p> <pre><code>git commit -m \"Descripci\u00f3n breve de los cambios\"\n</code></pre>"},{"location":"gitcmds/#5-subir-cambios-al-repositorio-push","title":"5. Subir cambios al repositorio (push)","text":"<p>Env\u00eda tus commits locales al repositorio en GitHub.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"gitcmds/#6-traer-cambios-del-remoto-pull","title":"6. Traer cambios del remoto (pull)","text":"<p>Actualiza tu proyecto con los \u00faltimos cambios de GitHub.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"gitcmds/#flujo-tipico-de-trabajo","title":"Flujo t\u00edpico de trabajo","text":"<ol> <li> <p>Traer cambios del remoto <pre><code>git pull origin main\n</code></pre></p> </li> <li> <p>Editar tus archivos de proyecto.</p> </li> <li> <p>Preparar los cambios <pre><code>git add .\n</code></pre></p> </li> <li> <p>Guardar los cambios <pre><code>git commit -m \"Mensaje descriptivo\"\n</code></pre></p> </li> <li> <p>Enviar los cambios al remoto <pre><code>git push origin main\n</code></pre></p> </li> </ol> <p>Consejo</p> <p>Piensa en este ciclo como un loop infinito: cada vez que quieras contribuir \u2192 primero <code>pull</code>, despu\u00e9s <code>add</code> + <code>commit</code>, y finalmente <code>push</code>.</p>"},{"location":"se%C3%B1ales_electricas/","title":"Se\u00f1ales electricas","text":""},{"location":"se%C3%B1ales_electricas/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Se\u00f1ales_electricas</li> <li>Equipo / Autor(es): Aldo Alvarez, Erik Zepeda, Sebastian Gomez</li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatr\u00f3nica</li> <li>Fecha: 05/09/25  </li> <li>Descripci\u00f3n breve: Parpadeo de un LED para observar el cambio en sus se\u00f1ales electricas con ayuda de un osciloscopio</li> </ul>"},{"location":"se%C3%B1ales_electricas/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Con la ayuda de una calculadora de temporizados utilizar un capacitor y una resistencia para lograr controlar el tiempo del parpadeo de un LED</li> <li>Espec\u00edficos:</li> <li>Lograr ver el cambio en las se\u00f1ales electricas</li> </ul>"},{"location":"se%C3%B1ales_electricas/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Realizar los calculos para obtener el tiempo deseado del parepadeo en el LED y observar los cambios causados por estos en las se\u00f1ales electricas</li> </ul>"},{"location":"se%C3%B1ales_electricas/#4-requisitos","title":"4) Requisitos","text":"<p>Hardware - Fuente de poder - Osciloscopio - Multimetro</p> <p>Conocimientos previos - Electronica basica</p>"},{"location":"se%C3%B1ales_electricas/#5-resultado-y-evidencias","title":"5) Resultado y evidencias","text":"<p>Se obtuvo el resultado esperado logrando que el LED parpadeara en los intervalos esperados por nosotros y a traves del osciloscopio logramos observar como este parpadeo tambi\u00e9n se reflejaba en cambios en se\u00f1ales el\u00e9ctricas</p> <p>Video del funcionamiento</p>"}]}